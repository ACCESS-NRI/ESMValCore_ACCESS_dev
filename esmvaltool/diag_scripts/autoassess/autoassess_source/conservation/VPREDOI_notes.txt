1. atmospheric_mass.py
======================
 - (dry, wet) : data variables; need ('m01s30i403', 'atmosphere_mass_per_unit_area')
 - titl2_temp = '$log_{{10}}$(e-fold time/year): {0:6.2f}   s.d.: {1:9.2e} Pa'
   titl2 = titl2_temp.format(metric_dry_2, sd_dry)
   formatting with array or list is fiddly in Python3

        'm01s30i403': ~~ atmosphere_mass_per_unit_area - atmosphere_mass_content_of_water
         = ? Paul: atmosphere_mass_per_unit_area - atmosphere_mass_content_of_water (roughly)

        'atmosphere_mass_per_unit_area'
        = ? no atmosphere_mass in CMOR CMIP5 apart from CO2

2. energy_budget.py
===================
 - large set of variables that need correct data:
        cvt = load_run_ss(run, 'instantaneous', 'm01s30i420', to_dt=endyear)
        = ? Paul: 'atmosphere_enthalpy_content'

        # column integral gr per unit area
        gr  = load_run_ss(run, 'instantaneous', 'm01s30i421', to_dt=endyear)
        = zg (CMIP5 Amon, equivalent 'geopotential_height', but units 'm') - derived?
        = ? Paul: 'atmosphere_potential_energy_content'

        # TOTAL KE PER UA WITH W  RHO GRID
        ke  = load_run_ss(run, 'instantaneous', 'm01s30i402', to_dt=endyear)
        = ? Paul: 'atmosphere_kinetic_energy_content'

        cvt, gr, ke = remove_forecast_period([cvt, gr, ke])

        # Set appropriate units for fields loaded above
        # TODO use cube.convert_units to take existing units into account
        cvt.units = cf_units.Unit('J m-2')
        gr.units  = cf_units.Unit('J m-2')
        ke.units  = cf_units.Unit('J m-2')

        # Seasonal means of energy fluxes:
        # m01s01i207: incoming SW rad flux (TOA)
        swin   = load_run_ss(run, 'seasonal', 'toa_incoming_shortwave_flux')
        = rsdt (CMIP5 Amon, exact name) OK!

        # m01s01i208: outgoing SW rad flux (TOA)
        swout  = load_run_ss(run, 'seasonal', 'toa_outgoing_shortwave_flux')
        = rsut (CMIP5 Amon, exact name) OK!

        # m01s01i201: net down surface SW flux
        sw     = load_run_ss(run, 'seasonal', 'surface_net_downward_shortwave_flux')
        = rsds (CIMP5 Amon: equivalent 'surface_downwelling_shortwave_flux_in_air') OK?

        # m01s02i201: net down surface LW flux
        lw     = load_run_ss(run, 'seasonal', 'surface_net_downward_longwave_flux')
        = rlds (CMIP5 Amon: equivalent 'surface_downwelling_longwave_flux_in_air') OK?

        # m01s03i332: TOA outgoing LW rad
        olr    = load_run_ss(run, 'seasonal', 'toa_outgoing_longwave_flux')
        = rlut (CMIP5 Amon, exact name) OK!

        # m01s03i217: surface heat flux"
        sh     = load_run_ss(run, 'seasonal', 'surface_upward_sensible_heat_flux')
        = hfss (CMIP5 Amon, exact name) OK!

        # m01s05i215: total snowfall rate
        snow   = load_run_ss(run, 'seasonal', 'snowfall_flux')
        = prsn (CMIP5 Amon, exact name) OK!

        # m01s05i216: total precipitation rate
        precip = load_run_ss(run, 'seasonal', 'precipitation_flux')
        = pr (CMIP5 Amon, exact name) OK!

        # energy correction
        en_cor = load_run_ss(run, 'seasonal', 'm01s30i419')
        = ? Paul: 'atmosphere_energy_content' 
        swin, swout, sw, lw, olr, sh, snow, precip, en_cor = \
            remove_forecast_period([swin, swout, sw, lw, olr, sh, snow, precip, en_cor])

 - a few changes in variable derivations so they accept units of bogus variable
 - a couple data flattenings again to correct for using bogus variable

##################################################################################
identified CMOR variables so far: [rsdt, rsut, rsds?, rlds?, rlut, hfss, prsn, pr]
##################################################################################
Example available datasets:
/badc/cmip5/data/cmip5/output1/MPI-M/MPI-ESM-LR/historical/mon/atmos/Amon/r1i1p1/latest/
/badc/cmip5/data/cmip5/output1/MPI-M/MPI-ESM-MR/historical/mon/atmos/Amon/r1i1p1/latest/
/badc/cmip5/data/cmip5/output1/INM/inmcm4/historical/mon/atmos/Amon/r1i1p1/latest
(will use these as initial datasets for CONSERVATION recipe)
##################################################################################

3. global_water_budget.py
=========================

 - one data indexing to cope with bogus variable

4. GC_water_conservation.py
===========================
 - pptest -> 'precipitation_flux')  # m01s05i216
 = pr OK!

 - missing variables:
    m0108i234: surface_runoff_flux; CMOR-Lmon: mrros (exact name) OK!
    m0108i235: subsurface_runoff_flux; CMOR-Lmon: mrro ? 
    m0108i245: no std name; ~ Inland basin runoff; nope in CMOR
    m0126i004: water_flux_into_sea_water_from_rivers; nope in CMOR

 - IMPORTANT!
   it needs two masks:

    '/group_workspaces/jasmin2/cmip6_prep/esmvaltool_users/valeriu/
    ESMValTool_AA_Cons/strato/namelist_autoassess_conservation_20180605_142620/
    work/aa_strato/autoassess_strato_test_1/ancil/masks/qrparm.landfrac_n240.0.pp'

   and

    '/group_workspaces/jasmin2/cmip6_prep/esmvaltool_users/valeriu/
    ESMValTool_AA_Cons/strato/namelist_autoassess_conservation_20180605_142620/
    work/aa_strato/autoassess_strato_test_1/ancil/conservation/glacialmask_n240.0.pp'

5. matplotlib_table
====================
 - from iteritems() to items() (for Python3)
