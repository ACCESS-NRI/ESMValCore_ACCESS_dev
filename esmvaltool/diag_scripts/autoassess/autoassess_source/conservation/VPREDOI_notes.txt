1. atmospheric_mass.py
======================
 - (dry, wet) : data variables; need ('m01s30i403', 'atmosphere_mass_per_unit_area')
 - titl2_temp = '$log_{{10}}$(e-fold time/year): {0:6.2f}   s.d.: {1:9.2e} Pa'
   titl2 = titl2_temp.format(metric_dry_2, sd_dry)
   formatting with array or list is fiddly in Python3

2. energy_budget.py
===================
 - large set of variables that need correct data:
        cvt = load_run_ss(run, 'instantaneous', 'm01s30i420', to_dt=endyear)
        # column integral gr per unit area
        gr  = load_run_ss(run, 'instantaneous', 'm01s30i421', to_dt=endyear)
        # TOTAL KE PER UA WITH W  RHO GRID
        ke  = load_run_ss(run, 'instantaneous', 'm01s30i402', to_dt=endyear)
        cvt, gr, ke = remove_forecast_period([cvt, gr, ke])

        # Set appropriate units for fields loaded above
        # TODO use cube.convert_units to take existing units into account
        cvt.units = cf_units.Unit('J m-2')
        gr.units  = cf_units.Unit('J m-2')
        ke.units  = cf_units.Unit('J m-2')

        # Seasonal means of energy fluxes:
        # m01s01i207: incoming SW rad flux (TOA)
        swin   = load_run_ss(run, 'seasonal', 'toa_incoming_shortwave_flux')
        # m01s01i208: outgoing SW rad flux (TOA)
        swout  = load_run_ss(run, 'seasonal', 'toa_outgoing_shortwave_flux')
        # m01s01i201: net down surface SW flux
        sw     = load_run_ss(run, 'seasonal', 'surface_net_downward_shortwave_flux')
        # m01s02i201: net down surface LW flux
        lw     = load_run_ss(run, 'seasonal', 'surface_net_downward_longwave_flux')
        # m01s03i332: TOA outgoing LW rad
        olr    = load_run_ss(run, 'seasonal', 'toa_outgoing_longwave_flux')
        # m01s03i217: surface heat flux"
        sh     = load_run_ss(run, 'seasonal', 'surface_upward_sensible_heat_flux')
        # m01s05i215: total snowfall rate
        snow   = load_run_ss(run, 'seasonal', 'snowfall_flux')
        # m01s05i216: total precipitation rate
        precip = load_run_ss(run, 'seasonal', 'precipitation_flux')
        # energy correction
        en_cor = load_run_ss(run, 'seasonal', 'm01s30i419')
        swin, swout, sw, lw, olr, sh, snow, precip, en_cor = \
            remove_forecast_period([swin, swout, sw, lw, olr, sh, snow, precip, en_cor])

 - a few changes in variable derivations so they accept units of bogus variable
 - a couple data flattenings again to correct for using bogus variable

3. global_water_budget.py
=========================
 - loops on stashes needed:
   ['m01s08i234', 'm01s08i235', 'm01s08i245', 'm01s26i004', 'm01s04i204', 'm01s05i206', 'm01s03i298', 'm01s03i353', 'm01s08i231', 'm01s04i204', 'm01s05i206', 'm01s03i298', 'm01s03i353', 'm01s08i231', 'm01s04i203', 'm01s05i205', 'm01s03i298', 'm01s03i223', 'm01s03i232', 'm01s03i223', 'm01s05i216', 'm01s08i234', 'm01s08i235', 'm01s08i245', 'm01s26i004', 'm01s04i204', 'm01s05i206', 'm01s03i298', 'm01s03i353', 'm01s08i231', 'm01s04i204', 'm01s05i206', 'm01s03i298', 'm01s03i353', 'm01s08i231', 'm01s04i203', 'm01s05i205', 'm01s03i298', 'm01s03i223', 'm01s03i232','m01s03i223', 'm01s05i216']

   set =
{'m01s03i223',
 'm01s03i232',
 'm01s03i298',
 'm01s03i353',
 'm01s04i203',
 'm01s04i204',
 'm01s05i205',
 'm01s05i206',
 'm01s05i216',
 'm01s08i231',
 'm01s08i234',
 'm01s08i235',
 'm01s08i245',
 'm01s26i004'}

 - one data indexing to cope with bogus variable

4. GC_water_conservation.py
===========================
 - pptest -> 'precipitation_flux')  # m01s05i216
 - IMPORTANT!
   it needs two masks:

    '/group_workspaces/jasmin2/cmip6_prep/esmvaltool_users/valeriu/
    ESMValTool_AA_Cons/strato/namelist_autoassess_conservation_20180605_142620/
    work/aa_strato/autoassess_strato_test_1/ancil/masks/qrparm.landfrac_n240.0.pp'

   and

    '/group_workspaces/jasmin2/cmip6_prep/esmvaltool_users/valeriu/
    ESMValTool_AA_Cons/strato/namelist_autoassess_conservation_20180605_142620/
    work/aa_strato/autoassess_strato_test_1/ancil/conservation/glacialmask_n240.0.pp'

5. matplotlib_table
====================
 - from iteritems() to items() (for Python3)
