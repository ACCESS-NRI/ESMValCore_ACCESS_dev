#
# This file generates the sidebar/toctree for the ESMValTool and ESMValCore
# and should be kept synchronized.
#

import os


def write_if_changed(fname, contents):

    try:
        with open(fname, "r") as fp:
            old_contents = fp.read()
    except:
        old_contents = ""

    if old_contents != contents:
        with open(fname, "w") as fp:
            fp.write(contents)


def generate_sidebar(conf, conf_api):

    # determine 'latest' or 'stable'
    # if not conf.do_gen:
    do_gen = os.environ.get("SIDEBAR", None) == "1" or conf["on_rtd"]
    version = conf["rtd_version"]

    lines = ["", ".. DO NOT MODIFY! THIS PAGE IS AUTOGENERATED!", ""]

    def toctree(name):
        lines.extend([
            ".. toctree::",
            "    :caption: %s" % name, "    :maxdepth: 2", ""
        ])

    def endl():
        lines.append("")

    def write(project, desc, link, mapping=conf['intersphinx_mapping']):
        if project != conf_api:
            if do_gen:
                args = desc, mapping[project][0], link
                lines.append("    %s <%s%s.html>" % args)
        else:
            lines.append("    %s <%s>" % (desc, link))

    #
    # Specify the sidebar contents here
    #

    toctree("ESMValTool")
    write("esmvaltool", "Preface", "preface/index")
    write("esmvaltool", "Getting started", "getting_started/index")
    write("esmvalcore", "ESMValTool Core", "esmvalcore/index")
    write("esmvaltool", "Guidelines for diagnostic developers",
          "esmvaldiag/index")
    write("esmvaltool", "Recipes", "recipes/index")
    write("esmvaltool", "ESMValTool Code API Documentation",
          "codedoc2/esmvaltool")
    endl()

    write_if_changed("_sidebar.rst.inc", "\n".join(lines))
